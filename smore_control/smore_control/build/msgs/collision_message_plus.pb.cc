// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "collision_message_plus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace collision_message_plus {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* CollisionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollisionMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_collision_5fmessage_5fplus_2eproto() {
  protobuf_AddDesc_collision_5fmessage_5fplus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "collision_message_plus.proto");
  GOOGLE_CHECK(file != NULL);
  CollisionMessage_descriptor_ = file->message_type(0);
  static const int CollisionMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMessage, collision1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMessage, collision2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMessage, positioncol1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMessage, positioncol2_),
  };
  CollisionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollisionMessage_descriptor_,
      CollisionMessage::default_instance_,
      CollisionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollisionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollisionMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_collision_5fmessage_5fplus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollisionMessage_descriptor_, &CollisionMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_collision_5fmessage_5fplus_2eproto() {
  delete CollisionMessage::default_instance_;
  delete CollisionMessage_reflection_;
}

void protobuf_AddDesc_collision_5fmessage_5fplus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034collision_message_plus.proto\022\033collisio"
    "n_message_plus.msgs\032\npose.proto\"\214\001\n\020Coll"
    "isionMessage\022\022\n\ncollision1\030\001 \002(\t\022\022\n\ncoll"
    "ision2\030\002 \002(\t\022\'\n\014PositionCol1\030\003 \002(\0132\021.gaz"
    "ebo.msgs.Pose\022\'\n\014PositionCol2\030\004 \001(\0132\021.ga"
    "zebo.msgs.Pose", 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "collision_message_plus.proto", &protobuf_RegisterTypes);
  CollisionMessage::default_instance_ = new CollisionMessage();
  CollisionMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_collision_5fmessage_5fplus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_collision_5fmessage_5fplus_2eproto {
  StaticDescriptorInitializer_collision_5fmessage_5fplus_2eproto() {
    protobuf_AddDesc_collision_5fmessage_5fplus_2eproto();
  }
} static_descriptor_initializer_collision_5fmessage_5fplus_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CollisionMessage::kCollision1FieldNumber;
const int CollisionMessage::kCollision2FieldNumber;
const int CollisionMessage::kPositionCol1FieldNumber;
const int CollisionMessage::kPositionCol2FieldNumber;
#endif  // !_MSC_VER

CollisionMessage::CollisionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollisionMessage::InitAsDefaultInstance() {
  positioncol1_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
  positioncol2_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
}

CollisionMessage::CollisionMessage(const CollisionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollisionMessage::SharedCtor() {
  _cached_size_ = 0;
  collision1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collision2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  positioncol1_ = NULL;
  positioncol2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollisionMessage::~CollisionMessage() {
  SharedDtor();
}

void CollisionMessage::SharedDtor() {
  if (collision1_ != &::google::protobuf::internal::kEmptyString) {
    delete collision1_;
  }
  if (collision2_ != &::google::protobuf::internal::kEmptyString) {
    delete collision2_;
  }
  if (this != default_instance_) {
    delete positioncol1_;
    delete positioncol2_;
  }
}

void CollisionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollisionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollisionMessage_descriptor_;
}

const CollisionMessage& CollisionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_collision_5fmessage_5fplus_2eproto();  return *default_instance_;
}

CollisionMessage* CollisionMessage::default_instance_ = NULL;

CollisionMessage* CollisionMessage::New() const {
  return new CollisionMessage;
}

void CollisionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_collision1()) {
      if (collision1_ != &::google::protobuf::internal::kEmptyString) {
        collision1_->clear();
      }
    }
    if (has_collision2()) {
      if (collision2_ != &::google::protobuf::internal::kEmptyString) {
        collision2_->clear();
      }
    }
    if (has_positioncol1()) {
      if (positioncol1_ != NULL) positioncol1_->::gazebo::msgs::Pose::Clear();
    }
    if (has_positioncol2()) {
      if (positioncol2_ != NULL) positioncol2_->::gazebo::msgs::Pose::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollisionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string collision1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collision1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collision1().data(), this->collision1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_collision2;
        break;
      }
      
      // required string collision2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collision2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collision2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collision2().data(), this->collision2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PositionCol1;
        break;
      }
      
      // required .gazebo.msgs.Pose PositionCol1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PositionCol1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positioncol1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PositionCol2;
        break;
      }
      
      // optional .gazebo.msgs.Pose PositionCol2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PositionCol2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positioncol2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollisionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string collision1 = 1;
  if (has_collision1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collision1().data(), this->collision1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->collision1(), output);
  }
  
  // required string collision2 = 2;
  if (has_collision2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collision2().data(), this->collision2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->collision2(), output);
  }
  
  // required .gazebo.msgs.Pose PositionCol1 = 3;
  if (has_positioncol1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->positioncol1(), output);
  }
  
  // optional .gazebo.msgs.Pose PositionCol2 = 4;
  if (has_positioncol2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->positioncol2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollisionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string collision1 = 1;
  if (has_collision1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collision1().data(), this->collision1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collision1(), target);
  }
  
  // required string collision2 = 2;
  if (has_collision2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collision2().data(), this->collision2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collision2(), target);
  }
  
  // required .gazebo.msgs.Pose PositionCol1 = 3;
  if (has_positioncol1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->positioncol1(), target);
  }
  
  // optional .gazebo.msgs.Pose PositionCol2 = 4;
  if (has_positioncol2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->positioncol2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollisionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string collision1 = 1;
    if (has_collision1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collision1());
    }
    
    // required string collision2 = 2;
    if (has_collision2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collision2());
    }
    
    // required .gazebo.msgs.Pose PositionCol1 = 3;
    if (has_positioncol1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positioncol1());
    }
    
    // optional .gazebo.msgs.Pose PositionCol2 = 4;
    if (has_positioncol2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positioncol2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollisionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollisionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollisionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollisionMessage::MergeFrom(const CollisionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collision1()) {
      set_collision1(from.collision1());
    }
    if (from.has_collision2()) {
      set_collision2(from.collision2());
    }
    if (from.has_positioncol1()) {
      mutable_positioncol1()->::gazebo::msgs::Pose::MergeFrom(from.positioncol1());
    }
    if (from.has_positioncol2()) {
      mutable_positioncol2()->::gazebo::msgs::Pose::MergeFrom(from.positioncol2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollisionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollisionMessage::CopyFrom(const CollisionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_positioncol1()) {
    if (!this->positioncol1().IsInitialized()) return false;
  }
  if (has_positioncol2()) {
    if (!this->positioncol2().IsInitialized()) return false;
  }
  return true;
}

void CollisionMessage::Swap(CollisionMessage* other) {
  if (other != this) {
    std::swap(collision1_, other->collision1_);
    std::swap(collision2_, other->collision2_);
    std::swap(positioncol1_, other->positioncol1_);
    std::swap(positioncol2_, other->positioncol2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollisionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollisionMessage_descriptor_;
  metadata.reflection = CollisionMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace collision_message_plus

// @@protoc_insertion_point(global_scope)
