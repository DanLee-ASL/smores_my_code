// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collision_message_plus.proto

#ifndef PROTOBUF_collision_5fmessage_5fplus_2eproto__INCLUDED
#define PROTOBUF_collision_5fmessage_5fplus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "pose.pb.h"
// @@protoc_insertion_point(includes)

namespace collision_message_plus {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_collision_5fmessage_5fplus_2eproto();
void protobuf_AssignDesc_collision_5fmessage_5fplus_2eproto();
void protobuf_ShutdownFile_collision_5fmessage_5fplus_2eproto();

class CollisionMessage;

// ===================================================================

class CollisionMessage : public ::google::protobuf::Message {
 public:
  CollisionMessage();
  virtual ~CollisionMessage();
  
  CollisionMessage(const CollisionMessage& from);
  
  inline CollisionMessage& operator=(const CollisionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CollisionMessage& default_instance();
  
  void Swap(CollisionMessage* other);
  
  // implements Message ----------------------------------------------
  
  CollisionMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollisionMessage& from);
  void MergeFrom(const CollisionMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string collision1 = 1;
  inline bool has_collision1() const;
  inline void clear_collision1();
  static const int kCollision1FieldNumber = 1;
  inline const ::std::string& collision1() const;
  inline void set_collision1(const ::std::string& value);
  inline void set_collision1(const char* value);
  inline void set_collision1(const char* value, size_t size);
  inline ::std::string* mutable_collision1();
  inline ::std::string* release_collision1();
  
  // required string collision2 = 2;
  inline bool has_collision2() const;
  inline void clear_collision2();
  static const int kCollision2FieldNumber = 2;
  inline const ::std::string& collision2() const;
  inline void set_collision2(const ::std::string& value);
  inline void set_collision2(const char* value);
  inline void set_collision2(const char* value, size_t size);
  inline ::std::string* mutable_collision2();
  inline ::std::string* release_collision2();
  
  // required .gazebo.msgs.Pose PositionCol1 = 3;
  inline bool has_positioncol1() const;
  inline void clear_positioncol1();
  static const int kPositionCol1FieldNumber = 3;
  inline const ::gazebo::msgs::Pose& positioncol1() const;
  inline ::gazebo::msgs::Pose* mutable_positioncol1();
  inline ::gazebo::msgs::Pose* release_positioncol1();
  
  // optional .gazebo.msgs.Pose PositionCol2 = 4;
  inline bool has_positioncol2() const;
  inline void clear_positioncol2();
  static const int kPositionCol2FieldNumber = 4;
  inline const ::gazebo::msgs::Pose& positioncol2() const;
  inline ::gazebo::msgs::Pose* mutable_positioncol2();
  inline ::gazebo::msgs::Pose* release_positioncol2();
  
  // @@protoc_insertion_point(class_scope:collision_message_plus.msgs.CollisionMessage)
 private:
  inline void set_has_collision1();
  inline void clear_has_collision1();
  inline void set_has_collision2();
  inline void clear_has_collision2();
  inline void set_has_positioncol1();
  inline void clear_has_positioncol1();
  inline void set_has_positioncol2();
  inline void clear_has_positioncol2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* collision1_;
  ::std::string* collision2_;
  ::gazebo::msgs::Pose* positioncol1_;
  ::gazebo::msgs::Pose* positioncol2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_collision_5fmessage_5fplus_2eproto();
  friend void protobuf_AssignDesc_collision_5fmessage_5fplus_2eproto();
  friend void protobuf_ShutdownFile_collision_5fmessage_5fplus_2eproto();
  
  void InitAsDefaultInstance();
  static CollisionMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// CollisionMessage

// required string collision1 = 1;
inline bool CollisionMessage::has_collision1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollisionMessage::set_has_collision1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollisionMessage::clear_has_collision1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollisionMessage::clear_collision1() {
  if (collision1_ != &::google::protobuf::internal::kEmptyString) {
    collision1_->clear();
  }
  clear_has_collision1();
}
inline const ::std::string& CollisionMessage::collision1() const {
  return *collision1_;
}
inline void CollisionMessage::set_collision1(const ::std::string& value) {
  set_has_collision1();
  if (collision1_ == &::google::protobuf::internal::kEmptyString) {
    collision1_ = new ::std::string;
  }
  collision1_->assign(value);
}
inline void CollisionMessage::set_collision1(const char* value) {
  set_has_collision1();
  if (collision1_ == &::google::protobuf::internal::kEmptyString) {
    collision1_ = new ::std::string;
  }
  collision1_->assign(value);
}
inline void CollisionMessage::set_collision1(const char* value, size_t size) {
  set_has_collision1();
  if (collision1_ == &::google::protobuf::internal::kEmptyString) {
    collision1_ = new ::std::string;
  }
  collision1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollisionMessage::mutable_collision1() {
  set_has_collision1();
  if (collision1_ == &::google::protobuf::internal::kEmptyString) {
    collision1_ = new ::std::string;
  }
  return collision1_;
}
inline ::std::string* CollisionMessage::release_collision1() {
  clear_has_collision1();
  if (collision1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = collision1_;
    collision1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string collision2 = 2;
inline bool CollisionMessage::has_collision2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollisionMessage::set_has_collision2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CollisionMessage::clear_has_collision2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CollisionMessage::clear_collision2() {
  if (collision2_ != &::google::protobuf::internal::kEmptyString) {
    collision2_->clear();
  }
  clear_has_collision2();
}
inline const ::std::string& CollisionMessage::collision2() const {
  return *collision2_;
}
inline void CollisionMessage::set_collision2(const ::std::string& value) {
  set_has_collision2();
  if (collision2_ == &::google::protobuf::internal::kEmptyString) {
    collision2_ = new ::std::string;
  }
  collision2_->assign(value);
}
inline void CollisionMessage::set_collision2(const char* value) {
  set_has_collision2();
  if (collision2_ == &::google::protobuf::internal::kEmptyString) {
    collision2_ = new ::std::string;
  }
  collision2_->assign(value);
}
inline void CollisionMessage::set_collision2(const char* value, size_t size) {
  set_has_collision2();
  if (collision2_ == &::google::protobuf::internal::kEmptyString) {
    collision2_ = new ::std::string;
  }
  collision2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollisionMessage::mutable_collision2() {
  set_has_collision2();
  if (collision2_ == &::google::protobuf::internal::kEmptyString) {
    collision2_ = new ::std::string;
  }
  return collision2_;
}
inline ::std::string* CollisionMessage::release_collision2() {
  clear_has_collision2();
  if (collision2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = collision2_;
    collision2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .gazebo.msgs.Pose PositionCol1 = 3;
inline bool CollisionMessage::has_positioncol1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CollisionMessage::set_has_positioncol1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CollisionMessage::clear_has_positioncol1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CollisionMessage::clear_positioncol1() {
  if (positioncol1_ != NULL) positioncol1_->::gazebo::msgs::Pose::Clear();
  clear_has_positioncol1();
}
inline const ::gazebo::msgs::Pose& CollisionMessage::positioncol1() const {
  return positioncol1_ != NULL ? *positioncol1_ : *default_instance_->positioncol1_;
}
inline ::gazebo::msgs::Pose* CollisionMessage::mutable_positioncol1() {
  set_has_positioncol1();
  if (positioncol1_ == NULL) positioncol1_ = new ::gazebo::msgs::Pose;
  return positioncol1_;
}
inline ::gazebo::msgs::Pose* CollisionMessage::release_positioncol1() {
  clear_has_positioncol1();
  ::gazebo::msgs::Pose* temp = positioncol1_;
  positioncol1_ = NULL;
  return temp;
}

// optional .gazebo.msgs.Pose PositionCol2 = 4;
inline bool CollisionMessage::has_positioncol2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CollisionMessage::set_has_positioncol2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CollisionMessage::clear_has_positioncol2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CollisionMessage::clear_positioncol2() {
  if (positioncol2_ != NULL) positioncol2_->::gazebo::msgs::Pose::Clear();
  clear_has_positioncol2();
}
inline const ::gazebo::msgs::Pose& CollisionMessage::positioncol2() const {
  return positioncol2_ != NULL ? *positioncol2_ : *default_instance_->positioncol2_;
}
inline ::gazebo::msgs::Pose* CollisionMessage::mutable_positioncol2() {
  set_has_positioncol2();
  if (positioncol2_ == NULL) positioncol2_ = new ::gazebo::msgs::Pose;
  return positioncol2_;
}
inline ::gazebo::msgs::Pose* CollisionMessage::release_positioncol2() {
  clear_has_positioncol2();
  ::gazebo::msgs::Pose* temp = positioncol2_;
  positioncol2_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace collision_message_plus

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_collision_5fmessage_5fplus_2eproto__INCLUDED
